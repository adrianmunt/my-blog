{"version":3,"sources":["pages/AboutPage.js","NavBar.js","pages/NotFoundPage.js","pages/ResumePage.js","App.js","serviceWorker.js","index.js"],"names":["AboutPage","react_default","a","createElement","Fragment","class","valign","src","alt","height","rowspan","href","NavBar","react_router_dom","to","NotFoundPage","ResumePage","width","App","className","src_NavBar","id","react_router","path","component","exact","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAeeA,EAbG,kBACjBC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SAAOE,MAAM,YACbJ,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKG,OAAO,OAAOC,IAAI,gBAAgBC,IAAI,cAAcC,OAAO,WACxER,EAAAC,EAAAC,cAAA,MAAIO,QAAQ,KAAIT,EAAAC,EAAAC,cAAA,qJAChBF,EAAAC,EAAAC,cAAA,0BAAiBF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,kCAAR,2BAAjB,oCCYcC,EAlBA,kBACdX,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,UAAT,UAEDb,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,WAAT,cCFWC,EALM,kBACpBd,EAAAC,EAAAC,cAAA,kCCgBca,EAXI,WAElB,OACCf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACAH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,SAAOI,IAAI,eAAeU,MAAM,QAAQR,OAAO,cC0BrCS,mLAtBb,OACCjB,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACAZ,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,OACdlB,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAAA,OAAKkB,GAAG,aACRpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACCrB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWxB,EAAWyB,OAAK,IAC3CxB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWxB,IAChCC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWR,IACjCf,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOE,UAAWT,eAXLW,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.56e9d065.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AboutPage = () => (\r\n\t<>\r\n\t<h1>About me</h1>\r\n\t<table class=\"about_me\">\r\n\t<tr><td><img valign=\"left\" src=\"/IMG_1480.jpg\" alt=\"Adrian Munt\" height=\"160px\"/></td>\r\n\t<td rowspan=\"2\"><p>I am a Software Engineer currently looking for new opportunities. I have 20+ years of experience using a variety of tools and platforms.</p>\r\n\t<p>Contact me at <a href=\"mailto:adrian_b_munt@yahoo.com\">adrian_b_munt@yahoo.com</a>. I'd love to hear from you</p></td>\r\n\t</tr>\r\n\r\n\t</table>\r\n\t</>\r\n)\r\n\r\nexport default AboutPage;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nconst NavBar = () => (\r\n\t<nav>\r\n\t\t<ul>\r\n\t\t\t<li>\r\n\t\t\t\t<Link to=\"/about\">About</Link>\r\n\t\t\t</li>\r\n\t\t\t<li>\r\n\t\t\t\t<Link to=\"/resume\">Resume</Link>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t</nav>\r\n);\r\n\r\n//\t\t\t<li>\r\n//\t\t\t\t<Link to=\"/\">Home</Link>\r\n//\t\t\t</li>\r\n\r\n\r\nexport default NavBar;\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n\t<h1>404: Page Not Found</h1>\r\n\r\n);\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\n//import articleContent from './article-content';\r\n//import ArticlesList from '../components/ArticlesList';\r\n//import CommentsList from '../components/CommentsList';\r\n//import UpvotesSection from '../components/UpvotesSection';\r\n//import AddCommentForm from '../components/AddCommentForm';\r\n//import NotFoundPage from './NotFoundPage';\r\n\r\nconst ResumePage = () => {\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<h1>Resume</h1>\r\n\t\t<p>This is my current resume:</p>\r\n\t\t<p><embed src='./resume.pdf' width='800px' height='2100px' /></p>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default ResumePage;","import React, { Component } from 'react';\r\n//import HomePage from './pages/HomePage';\r\nimport './App.css';\r\nimport {\r\n\tBrowserRouter as Router,\r\n\tRoute,\r\n\tSwitch\r\n} from 'react-router-dom';\r\nimport AboutPage from './pages/AboutPage';\r\n//import ArticlesListPage from './pages/ArticlesListPage';\r\n//import ArticlePage from './pages/ArticlePage';\r\nimport NavBar from './NavBar';\r\n//import FunniesPage from './pages/FunniesPage';\r\nimport NotFoundPage from './pages/NotFoundPage';\r\nimport ResumePage from './pages/ResumePage';\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router> \r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<NavBar />\r\n\t\t\t\t<div id=\"page-body\">\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path=\"/\" component={AboutPage} exact />\r\n\t\t\t\t\t<Route path=\"/about\" component={AboutPage} />\r\n\t\t\t\t\t<Route path=\"/resume\" component={ResumePage} />\r\n\t\t\t\t\t<Route component={NotFoundPage} />\r\n\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n//\t\t\t\t\t<Route path=\"/articles-list\" component={ArticlesListPage} />\r\n// \t\t\t\t\t<Route path=\"/article/:name\" component={ArticlePage} />\t\t\t\t\t\r\n\r\n// <Route path=\"/funnies\" component={FunniesPage} />\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}